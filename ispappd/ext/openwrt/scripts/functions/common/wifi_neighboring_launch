#!/bin/sh
# Copyright (C) 2024 ISPAPP CWMP Client
# WiFi Neighboring Diagnostic Launch Script

[ "$1" != "run" ] && return

UCI_GET_VARSTATE="/sbin/uci -q ${UCI_CONFIG_DIR:+-c $UCI_CONFIG_DIR} -P /var/state get"
UCI_SET_VARSTATE="/sbin/uci -q ${UCI_CONFIG_DIR:+-c $UCI_CONFIG_DIR} -P /var/state set"

event_dignostic() {
	echo "`date`: INFORM"
	ubus call ispappd inform '{"event":"8 DIAGNOSTICS COMPLETE"}'
}

wifi_neighboring_scan() {
	local state="`$UCI_GET_VARSTATE ispappd.@local[0].WiFiNeighboringDiagnosticsState`"
	
	if [ "$state" != "Requested" ]; then
		return
	fi
	
	# Initialize result count
	$UCI_SET_VARSTATE ispappd.@local[0].WiFiNeighboringResultCount=0
	
	# Clear previous results
	local i=1
	while [ $i -le 50 ]; do  # Clear up to 50 previous results
		$UCI_SET_VARSTATE ispappd.@local[0].WiFiNeighboringResult_${i}_Radio=""
		$UCI_SET_VARSTATE ispappd.@local[0].WiFiNeighboringResult_${i}_SSID=""
		$UCI_SET_VARSTATE ispappd.@local[0].WiFiNeighboringResult_${i}_BSSID=""
		$UCI_SET_VARSTATE ispappd.@local[0].WiFiNeighboringResult_${i}_Channel=""
		$UCI_SET_VARSTATE ispappd.@local[0].WiFiNeighboringResult_${i}_SignalStrength=""
		$UCI_SET_VARSTATE ispappd.@local[0].WiFiNeighboringResult_${i}_FrequencyBand=""
		$UCI_SET_VARSTATE ispappd.@local[0].WiFiNeighboringResult_${i}_OperatingStandards=""
		$UCI_SET_VARSTATE ispappd.@local[0].WiFiNeighboringResult_${i}_ChannelBandwidth=""
		$UCI_SET_VARSTATE ispappd.@local[0].WiFiNeighboringResult_${i}_Noise=""
		i=$((i + 1))
	done
	
	# Perform WiFi scan
	local result_count=0
	local interface
	
	# Find WiFi interfaces
	for phy in /sys/class/ieee80211/phy*; do
		[ ! -d "$phy" ] && continue
		
		local phy_name=$(basename $phy)
		local radio_instance=""
		
		# Find corresponding radio instance from UCI config
		local radio_config=$(uci show wireless | grep "wifi-device" | grep "${phy_name#phy}" | cut -d'.' -f2)
		if [ -n "$radio_config" ]; then
			radio_instance=$(uci get wireless.$radio_config.wifi_radio_instance 2>/dev/null)
			[ -z "$radio_instance" ] && radio_instance="1"  # Default to 1 if not found
		else
			radio_instance="1"  # Default radio instance
		fi
		
		# Create interface for scanning if it doesn't exist
		local scan_interface="${phy_name}_scan"
		
		# Try to create a monitor interface for scanning
		iw phy $phy_name interface add $scan_interface type monitor 2>/dev/null
		ip link set $scan_interface up 2>/dev/null
		
		# Perform scan using iw scan
		local scan_result=$(iw dev $scan_interface scan 2>/dev/null | grep -E "(BSS|SSID|freq|signal)" 2>/dev/null)
		
		# If monitor interface creation failed, try using existing interfaces
		if [ -z "$scan_result" ]; then
			# Clean up failed monitor interface
			ip link set $scan_interface down 2>/dev/null
			iw dev $scan_interface del 2>/dev/null
			
			# Try to find existing interface for this phy
			for iface in /sys/class/net/*; do
				[ ! -d "$iface" ] && continue
				local iface_name=$(basename $iface)
				local iface_phy=$(readlink $iface/phy80211 2>/dev/null | xargs basename 2>/dev/null)
				
				if [ "$iface_phy" = "$phy_name" ]; then
					scan_result=$(iw dev $iface_name scan 2>/dev/null | grep -E "(BSS|SSID|freq|signal)" 2>/dev/null)
					break
				fi
			done
		fi
		
		# Parse scan results
		if [ -n "$scan_result" ]; then
			local current_bssid=""
			local current_ssid=""
			local current_freq=""
			local current_signal=""
			
			echo "$scan_result" | while read line; do
				case "$line" in
					*"BSS "*:*)
						# Save previous entry if we have data
						if [ -n "$current_bssid" ]; then
							wifi_neighboring_add_result "$radio_instance" "$current_ssid" "$current_bssid" "$current_freq" "$current_signal"
						fi
						
						# Start new entry
						current_bssid=$(echo "$line" | sed 's/.*BSS \([0-9a-f:]*\).*/\1/')
						current_ssid=""
						current_freq=""
						current_signal=""
						;;
					*"SSID:"*)
						current_ssid=$(echo "$line" | sed 's/.*SSID: //')
						;;
					*"freq:"*)
						current_freq=$(echo "$line" | sed 's/.*freq: \([0-9]*\).*/\1/')
						;;
					*"signal:"*)
						current_signal=$(echo "$line" | sed 's/.*signal: \([0-9.-]*\).*/\1/')
						;;
				esac
			done
			
			# Don't forget the last entry
			if [ -n "$current_bssid" ]; then
				wifi_neighboring_add_result "$radio_instance" "$current_ssid" "$current_bssid" "$current_freq" "$current_signal"
			fi
		fi
		
		# Clean up scan interface
		ip link set $scan_interface down 2>/dev/null
		iw dev $scan_interface del 2>/dev/null
	done
	
	# Set diagnostic state to Complete
	$UCI_SET_VARSTATE ispappd.@local[0].WiFiNeighboringDiagnosticsState=Complete
	event_dignostic
}

wifi_neighboring_add_result() {
	local radio_ref="$1"
	local ssid="$2"
	local bssid="$3"
	local freq="$4"
	local signal="$5"
	
	# Get current result count
	local count=$($UCI_GET_VARSTATE ispappd.@local[0].WiFiNeighboringResultCount 2>/dev/null)
	count=${count:-0}
	count=$((count + 1))
	
	# Convert frequency to channel and band
	local channel=""
	local band=""
	local standards=""
	local bandwidth="20MHz"  # Default bandwidth
	local noise="-95"        # Default noise floor
	
	if [ -n "$freq" ]; then
		# Convert frequency to channel
		if [ $freq -ge 2412 -a $freq -le 2484 ]; then
			band="2.4GHz"
			case $freq in
				2412) channel="1" ;;
				2417) channel="2" ;;
				2422) channel="3" ;;
				2427) channel="4" ;;
				2432) channel="5" ;;
				2437) channel="6" ;;
				2442) channel="7" ;;
				2447) channel="8" ;;
				2452) channel="9" ;;
				2457) channel="10" ;;
				2462) channel="11" ;;
				2467) channel="12" ;;
				2472) channel="13" ;;
				2484) channel="14" ;;
				*) channel=$(( (freq - 2412) / 5 + 1 )) ;;
			esac
			standards="g,n"  # Common for 2.4GHz
		elif [ $freq -ge 5170 -a $freq -le 5825 ]; then
			band="5GHz"
			channel=$(( (freq - 5000) / 5 ))
			standards="a,n,ac"  # Common for 5GHz
		else
			band="Unknown"
			channel="0"
			standards="Unknown"
		fi
	fi
	
	# Create radio reference
	local radio_instance="$radio_ref"
	[ -z "$radio_instance" ] && radio_instance="1"
	local radio_reference="Device.WiFi.Radio.$radio_instance."
	
	# Store result data
	$UCI_SET_VARSTATE ispappd.@local[0].WiFiNeighboringResult_${count}_Radio="$radio_reference"
	$UCI_SET_VARSTATE ispappd.@local[0].WiFiNeighboringResult_${count}_SSID="$ssid"
	$UCI_SET_VARSTATE ispappd.@local[0].WiFiNeighboringResult_${count}_BSSID="$bssid"
	$UCI_SET_VARSTATE ispappd.@local[0].WiFiNeighboringResult_${count}_Channel="$channel"
	$UCI_SET_VARSTATE ispappd.@local[0].WiFiNeighboringResult_${count}_SignalStrength="$signal"
	$UCI_SET_VARSTATE ispappd.@local[0].WiFiNeighboringResult_${count}_FrequencyBand="$band"
	$UCI_SET_VARSTATE ispappd.@local[0].WiFiNeighboringResult_${count}_OperatingStandards="$standards"
	$UCI_SET_VARSTATE ispappd.@local[0].WiFiNeighboringResult_${count}_ChannelBandwidth="$bandwidth"
	$UCI_SET_VARSTATE ispappd.@local[0].WiFiNeighboringResult_${count}_Noise="$noise"
	
	# Update result count
	$UCI_SET_VARSTATE ispappd.@local[0].WiFiNeighboringResultCount="$count"
}

# Main execution
wifi_neighboring_scan
